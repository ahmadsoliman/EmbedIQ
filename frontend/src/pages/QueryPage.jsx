import React, { useState } from 'react';
import {
  Box,
  Button,
  Card,
  CardContent,
  CircularProgress,
  Container,
  Divider,
  Grid,
  Paper,
  TextField,
  Typography,
  List,
  ListItem,
  ListItemText,
} from '@mui/material';
import SearchIcon from '@mui/icons-material/Search';

/**
 * Query page with a form to submit questions and display responses
 */
function QueryPage() {
  const [query, setQuery] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!query.trim()) return;

    setIsLoading(true);
    setError(null);

    try {
      // In a real implementation, this would call the API
      // For now, we'll simulate an API response
      await new Promise((resolve) => setTimeout(resolve, 1500));

      // Mock response
      setResult({
        query: query,
        answer: `This is a mock answer to "${query}". In a real implementation, this would be generated by calling the EmbedIQ API.`,
        context_chunks: [
          {
            text: 'This is a sample context chunk that would be retrieved from the document store.',
            document_id: 1,
            chunk_id: 1,
            score: 0.92,
          },
          {
            text: 'Another sample context chunk with relevant information for the query.',
            document_id: 2,
            chunk_id: 3,
            score: 0.85,
          },
        ],
        sources: [
          {
            title: 'Sample Document 1',
            id: '1',
            source: 'Internal Knowledge Base',
          },
          {
            title: 'Sample Document 2',
            id: '2',
            source: 'Technical Documentation',
          },
        ],
        latency_ms: 742.5,
      });
    } catch (err) {
      setError(
        'An error occurred while processing your query. Please try again.'
      );
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Container maxWidth='lg'>
      <Box sx={{ mb: 4 }}>
        <Typography variant='h4' component='h1' gutterBottom>
          Query Interface
        </Typography>
        <Typography color='text.secondary' paragraph>
          Ask a question and get an AI-generated answer based on the context
          from your documents.
        </Typography>

        {/* Query form */}
        <Paper
          component='form'
          onSubmit={handleSubmit}
          sx={{
            p: 3,
            mt: 4,
            mb: 4,
            display: 'flex',
            flexDirection: 'column',
            gap: 2,
          }}
        >
          <TextField
            label='Enter your question'
            variant='outlined'
            fullWidth
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            placeholder='e.g., What is retrieval augmented generation?'
            disabled={isLoading}
          />
          <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>
            <Button
              type='submit'
              variant='contained'
              disabled={isLoading || !query.trim()}
              startIcon={
                isLoading ? <CircularProgress size={20} /> : <SearchIcon />
              }
            >
              {isLoading ? 'Processing...' : 'Submit Query'}
            </Button>
          </Box>
        </Paper>

        {/* Error message */}
        {error && (
          <Paper
            sx={{
              p: 3,
              mb: 4,
              bgcolor: 'error.light',
              color: 'error.contrastText',
            }}
          >
            <Typography>{error}</Typography>
          </Paper>
        )}

        {/* Results */}
        {result && (
          <Box sx={{ mb: 4 }}>
            <Typography variant='h5' gutterBottom>
              Answer
            </Typography>
            <Card sx={{ mb: 4 }}>
              <CardContent>
                <Typography variant='body1' paragraph>
                  {result.answer}
                </Typography>
                <Divider sx={{ my: 2 }} />
                <Typography variant='caption' color='text.secondary'>
                  Processed in {result.latency_ms.toFixed(2)}ms
                </Typography>
              </CardContent>
            </Card>

            <Typography variant='h5' gutterBottom>
              Sources
            </Typography>
            <List>
              {result.sources.map((source, index) => (
                <ListItem
                  key={index}
                  divider={index < result.sources.length - 1}
                >
                  <ListItemText
                    primary={source.title}
                    secondary={`Source: ${source.source || 'Unknown'}`}
                  />
                </ListItem>
              ))}
            </List>

            <Typography variant='h5' sx={{ mt: 4, mb: 2 }}>
              Context
            </Typography>
            <Grid container spacing={2}>
              {result.context_chunks.map((chunk, index) => (
                <Grid item xs={12} key={index}>
                  <Card>
                    <CardContent>
                      <Typography variant='body2' paragraph>
                        {chunk.text}
                      </Typography>
                      <Typography variant='caption' color='text.secondary'>
                        Relevance score: {chunk.score.toFixed(2)} | Document ID:{' '}
                        {chunk.document_id} | Chunk ID: {chunk.chunk_id}
                      </Typography>
                    </CardContent>
                  </Card>
                </Grid>
              ))}
            </Grid>
          </Box>
        )}
      </Box>
    </Container>
  );
}

export default QueryPage;
